
Solution 1->



mysql> select * from students;
+------+----------+
| ID   | Name     |
+------+----------+
|    1 | Ashley   |
|    2 | Samantha |
|    3 | Julia    |
|    4 | Scarlet  |
+------+----------+
4 rows in set (0.00 sec)

mysql> select * from packages;
+------+--------+
| ID   | Salary |
+------+--------+
|    1 |     15 |
|    2 |     11 |
|    3 |     12 |
|    4 |     12 |
+------+--------+
4 rows in set (0.00 sec)

mysql> select * from friends;
+------+-----------+
| id   | friend_id |
+------+-----------+
|    1 |         2 |
|    2 |         3 |
|    3 |         4 |
|    4 |         1 |
+------+-----------+
4 rows in set (0.00 sec)

mysql> select name from students where ID IN(select ID from packages where salary>11);
+---------+
| name    |
+---------+
| Ashley  |
| Julia   |
| Scarlet |
+---------+
3 rows in set (0.01 sec)

-----------------------------------------------------------------------------------------------------------------------------------

solution 4->




mysql> select * from persons
    -> ;
+----------+----------+-----------+
| personID | lastname | firstname |
+----------+----------+-----------+
|        1 | wang     | allen     |
|        2 | alice    | bob       |
+----------+----------+-----------+
2 rows in set (0.01 sec)

mysql> select * from address;
+-----------+----------+----------+------------+
| addressID | personID | city     | state      |
+-----------+----------+----------+------------+
|         1 |        2 | new york | NewYork    |
|         2 |        3 | Leetcode | California |
+-----------+----------+----------+------------+
2 rows in set (0.00 sec)




mysql> select persons.firstname,persons.lastname,address.city,address.state from persons LEFT JOIN address ON persons.personID=address.personID;
+-----------+----------+----------+---------+
| firstname | lastname | city     | state   |
+-----------+----------+----------+---------+
| allen     | wang     | NULL     | NULL    |
| bob       | alice    | new york | NewYork |
+-----------+----------+----------+---------+
2 rows in set (0.00 sec)


--------------------------------------------------------------------------------------------------------------------------------------------------------------


Solution 2->



 For 3NF table should be in 2NF and there is no transitive functional dependency of non-prime attribute on a superKey.means transitive functional dependency of non-prime attribute on any super key should be
removed.



schema before 3NF(empID,empName,empZip,empState,empCity,empDistrict);

schema after 3NF  empTable(empID,empName,empZip);
                empZipTable(empZip,empState,empCity,empDistrict);

here we remove transitive dependency of superkey on non prime attribute by breaking into two tables.

-----------------------------------------------------------------------------------------------------------------------------------------------------------



Solution3->



 Transaction = A transaction means multiple queries in single statement i.e a sequence of operations performed (using one or more SQL statements) on a
database as a single logical unit of work. A transaction must be fully completed or not completed means all quries in the transaction runs else no query runs.


Acid Properties ->Atomic ,consistent,isolated ,durable.

Atomic = It means transaction must be fully completed or else not completed means all queries in the transaction runs or else no query runs.

Consistent = After transaction data must be in consistent state means if before transaction balace in two persons account is 1500 and after transaction it must be 1500.

Isolated = Modifications of data performed by a transaction must be independent of another
transaction. Unless this happens, the outcome of a transaction may be erroneous.

durable = When the transaction is completed, effects of the modifications performed by the
transaction must be permanent in the system.
